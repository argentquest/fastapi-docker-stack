# V2 POC Docker Compose - Production Configuration
# This file contains security-hardened configuration for production use



services:
  # FastAPI Application
  app:
    build: .
    container_name: v2-poc-app
    restart: unless-stopped
    env_file:
      - .env.prod
    environment:
      # AI Service Configuration
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - OPENROUTER_BASE_URL=${OPENROUTER_BASE_URL}
      - OPENROUTER_SITE_URL=${OPENROUTER_SITE_URL}
      - OPENROUTER_APP_NAME=${OPENROUTER_APP_NAME}
      - OPENROUTER_DEFAULT_MODEL=${OPENROUTER_DEFAULT_MODEL}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - GOOGLE_DEFAULT_MODEL=${GOOGLE_DEFAULT_MODEL}
      - DEFAULT_MODEL=${DEFAULT_MODEL}
      # Database and Storage
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      # Application Settings
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - APP_ENV=${APP_ENV:-production}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - internal
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=100m
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    user: "1000:1000"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: v2-poc-nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app
    networks:
      - internal
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/cache/nginx:rw,noexec,nosuid
      - /var/run:rw,noexec,nosuid
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    user: "nginx:nginx"

  # PostgreSQL with pgvector
  postgres:
    image: pgvector/pgvector:pg16
    container_name: v2-poc-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - internal
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '0.5'
        reservations:
          memory: 1G
          cpus: '0.25'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    # PostgreSQL runs as postgres user by default

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: v2-poc-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    networks:
      - internal
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
        reservations:
          memory: 128M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    user: "redis:redis"

  # MinIO Object Storage
  minio:
    image: minio/minio:RELEASE.2024-12-13T22-06-12Z
    container_name: v2-poc-minio
    restart: unless-stopped
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
      - MINIO_BROWSER=${MINIO_BROWSER:-off}
    volumes:
      - minio_data:/data
    command: server /data
    networks:
      - internal
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'
        reservations:
          memory: 256M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    user: "1000:1000"

networks:
  internal:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./data/postgres
  redis_data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./data/redis
  minio_data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./data/minio

# Secrets (use with Docker Swarm or external secret management)
secrets:
  postgres_password:
    external: true
  redis_password:
    external: true
  minio_secret_key:
    external: true
  openrouter_api_key:
    external: true