# ArgenQuest Development Suite - Complete Secure Stack (16 Containers)
# Self-hosted development environment with Let's Encrypt SSL via NPM
# Domain: pocmaster.argentquest.com

services:
  # ============================================
  # DMZ ZONE - Internet Facing
  # ============================================
  
  # Nginx Proxy Manager - Reverse proxy with Let's Encrypt
  npm:
    image: 'jc21/nginx-proxy-manager:latest'
    container_name: aq-devsuite-npm
    restart: unless-stopped
    ports:
      - '80:80'      # HTTP (redirects to HTTPS)
      - '81:81'      # NPM Admin UI
      - '443:443'    # HTTPS with Let's Encrypt
    volumes:
      - ./data/npm/data:/data
      - ./data/npm/letsencrypt:/etc/letsencrypt
    networks:
      - v2_network
    environment:
      - DISABLE_IPV6=true

  # ============================================
  # FRONTEND ZONE - User Facing Services
  # ============================================

  # Heimdall - Main application dashboard
  heimdall:
    image: lscr.io/linuxserver/heimdall:latest
    container_name: aq-devsuite-heimdall
    restart: "no"
    ports:
      - "8086:80"
      - "8087:443"
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=UTC
    volumes:
      - heimdall_config:/config
    networks:
      - v2_network

  # System Monitor - Docker stats monitoring
  system-monitor:
    image: nginx:alpine
    container_name: aq-devsuite-system-monitor
    restart: "no"
    ports:
      - "8085:80"
    volumes:
      - ./system-monitor:/usr/share/nginx/html:ro
    networks:
      - v2_network

  # Beszel Hub - Server monitoring dashboard
  beszel:
    image: henrygd/beszel
    container_name: aq-devsuite-beszel
    restart: unless-stopped
    ports:
      - '8090:8090'
    volumes:
      - beszel_data:/beszel_data
    networks:
      - v2_network
    environment:
      - PORT=8090
      - BESZEL_ADMIN_EMAIL=admin@example.com
      - BESZEL_ADMIN_PASSWORD=changeme

  # Beszel Agent - Monitors Docker host and containers
  beszel-agent:
    image: henrygd/beszel-agent
    container_name: aq-devsuite-beszel-agent
    restart: unless-stopped
    ports:
      - '45876:45876'
    networks:
      - v2_network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - PORT=45876
      - KEY=ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAICygZKxaz3lRVCvTbytqhAQjEzGAPqcaP+50c2hjcL1D
      - DOCKER_HOST=unix:///var/run/docker.sock
    depends_on:
      - beszel

  # Monitor API - Backend for system monitoring
  monitor-api:
    build:
      context: ./system-monitor
      dockerfile: Dockerfile.api
    container_name: aq-devsuite-monitor-api
    restart: "no"
    ports:
      - "8083:8083"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - .:/app/project:ro
    networks:
      - v2_network

  # ============================================
  # API ZONE - Application Services
  # ============================================
  
  # FastAPI Development - Hot reload enabled
  app-dev:
    build: .
    container_name: aq-devsuite-app-dev
    restart: "no"
    ports:
      - "8001:8000"      # FastAPI main app + Frontend Claude
    env_file:
      - .env.dev
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ./app:/app/app
    command: ["uv", "run", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    networks:
      - v2_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # FastAPI Production - Gunicorn with workers
  app-prod:
    build: .
    container_name: aq-devsuite-app-prod
    restart: unless-stopped
    env_file:
      - .env.prod
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    command: ["uv", "run", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "1"]
    networks:
      - v2_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ============================================
  # BACKEND ZONE - Data Layer (Isolated)
  # ============================================

  # PostgreSQL with pgvector
  postgres:
    image: pgvector/pgvector:pg16
    container_name: aq-devsuite-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=pocuser
      - POSTGRES_PASSWORD=pocpass
      - POSTGRES_DB=poc_local
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"  # Direct access for development
    networks:
      - v2_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pocuser -d poc_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      postgres
      -c shared_preload_libraries='vector'
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB

  # MongoDB - NoSQL Document Database
  mongodb:
    image: mongo:7.0
    container_name: aq-devsuite-mongodb
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=mongoadmin
      - MONGO_INITDB_ROOT_PASSWORD=mongopass123
      - MONGO_INITDB_DATABASE=poc_mongo_db
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    ports:
      - "27017:27017"  # Direct access for development
    networks:
      - v2_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Redis - In-memory cache
  redis:
    image: redis:7.2-alpine
    container_name: aq-devsuite-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - v2_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # MinIO - S3-compatible object storage
  minio:
    image: minio/minio:latest
    container_name: aq-devsuite-minio
    restart: unless-stopped
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - v2_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 30s

  # ============================================
  # MANAGEMENT ZONE - Admin Tools (Isolated)
  # ============================================

  # Portainer CE - Docker management
  portainer:
    image: portainer/portainer-ce:latest
    container_name: aq-devsuite-portainer
    restart: "no"
    security_opt:
      - no-new-privileges:true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    ports:
      - "9443:9443"  # Direct HTTPS access
    networks:
      - v2_network
    command: --bind-https=":9443" --http-disabled

  # pgAdmin - PostgreSQL management
  pgadmin:
    image: dpage/pgadmin4
    container_name: aq-devsuite-pgadmin
    restart: "no"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_LISTEN_ADDRESS=0.0.0.0
      - PGADMIN_CONFIG_SERVER_MODE=False
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
      - PGADMIN_DISABLE_POSTFIX=true
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./pgadmin-config/servers.json:/pgadmin4/servers.json:ro
      - ./pgadmin-config/pgpass:/var/lib/pgadmin/.pgpass:ro
    ports:
      - "5050:80"  # Direct HTTP access
    networks:
      - v2_network
    depends_on:
      - postgres

  # Mongo Express - MongoDB management
  mongo-express:
    image: mongo-express:latest
    container_name: aq-devsuite-mongo-express
    restart: "no"
    ports:
      - "8082:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=mongoadmin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=mongopass123
      - ME_CONFIG_MONGODB_URL=mongodb://mongoadmin:mongopass123@mongodb:27017/
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin
    networks:
      - v2_network
    depends_on:
      mongodb:
        condition: service_healthy

  # Redis Commander - Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: aq-devsuite-redis-commander
    restart: "no"
    ports:
      - "8084:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    networks:
      - v2_network
    depends_on:
      - redis

  # ============================================
  # DEVELOPMENT ZONE - Dev Tools (Isolated)
  # ============================================

  # VS Code Server - Browser-based IDE
  vscode:
    image: codercom/code-server:4.20.0
    container_name: aq-devsuite-vscode
    restart: "no"
    ports:
      - "8080:8080"
    environment:
      - PASSWORD=${VSCODE_PASSWORD:-changeme}
      - SUDO_PASSWORD=${VSCODE_PASSWORD:-changeme}
    volumes:
      - ./:/home/coder/project
      - vscode_config:/home/coder/.config
      - vscode_extensions:/home/coder/.local
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - v2_network
    user: "0:0"

  # MCP Inspector - MCP protocol testing
  mcp-inspector:
    build:
      context: ./mcp-inspector
      dockerfile: Dockerfile
    container_name: aq-devsuite-mcp-inspector
    restart: "no"
    ports:
      - "5173:5173"  # Direct HTTP access
    environment:
      - NODE_ENV=development
    networks:
      - v2_network

  # n8n - Workflow automation
  n8n:
    image: n8nio/n8n:latest
    container_name: aq-devsuite-n8n
    restart: "no"
    ports:
      - "5678:5678"  # Direct HTTP access
    environment:
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://n8n.pocmaster.argentquest.com
      - GENERIC_TIMEZONE=UTC
      - N8N_USER_MANAGEMENT_DISABLED=true
      - N8N_DIAGNOSTICS_ENABLED=false
      - N8N_VERSION_NOTIFICATIONS_ENABLED=false
      - N8N_TEMPLATES_ENABLED=true
      - N8N_ONBOARDING_FLOW_DISABLED=true
      - N8N_METRICS=false
    volumes:
      - n8n_data:/home/node/.n8n
    networks:
      - v2_network
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Jupyter Lab - Data science and analysis
  jupyter:
    image: jupyter/datascience-notebook:latest
    container_name: aq-devsuite-jupyter
    restart: "no"
    ports:
      - "8888:8888"  # Direct HTTP access
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=changeme
      - GRANT_SUDO=yes
      - CHOWN_HOME=yes
    volumes:
      - jupyter_data:/home/jovyan/work
      - ./:/home/jovyan/work/project:ro
    networks:
      - v2_network
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy

  # NPM Auto-Setup - Automatically configures proxy hosts
  npm-setup:
    build:
      context: ./scripts
      dockerfile: Dockerfile.npm-setup
    container_name: aq-devsuite-npm-setup
    restart: "no"
    networks:
      - v2_network
    depends_on:
      - npm
      - app-prod
      - app-dev
      - pgadmin
      - mongo-express
      - redis-commander
      - minio
      - portainer
      - heimdall
      - vscode
      - mcp-inspector
      - n8n
      - jupyter

  # Beszel Auto-Setup - Generates keys and configures monitoring
  beszel-setup:
    build:
      context: ./scripts
      dockerfile: Dockerfile.beszel-setup
    container_name: aq-devsuite-beszel-setup
    restart: "no"
    networks:
      - v2_network
    volumes:
      - ./docker-compose.yml:/workspace/docker-compose.yml
      - beszel_keys:/keys
    depends_on:
      - beszel
      - beszel-agent

# ============================================
# NETWORK DEFINITIONS (Simplified Single Network)
# ============================================
networks:
  v2_network:
    name: aq-devsuite-network
    driver: bridge

# ============================================
# VOLUMES (Data Persistence)
# ============================================
volumes:
  # Database data
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  
  # Application configs
  pgadmin_data:
    driver: local
  heimdall_config:
    driver: local
  portainer_data:
    driver: local
  vscode_config:
    driver: local
  vscode_extensions:
    driver: local
  n8n_data:
    driver: local
  jupyter_data:
    driver: local
  beszel_data:
    driver: local
  beszel_keys:
    driver: local