{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "docker-compose-up",
      "type": "shell",
      "command": "docker-compose up -d",
      "problemMatcher": [],
      "group": {
        "kind": "build",
        "isDefault": false
      },
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    },
    {
      "label": "docker-compose-down",
      "type": "shell",
      "command": "docker-compose down",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    },
    {
      "label": "docker-compose-build",
      "type": "shell",
      "command": "docker-compose build",
      "problemMatcher": [],
      "group": "build",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    },
    {
      "label": "docker-compose-logs",
      "type": "shell",
      "command": "docker-compose logs -f",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    },
    {
      "label": "install-dependencies",
      "type": "shell",
      "command": "uv pip install -e .",
      "problemMatcher": [],
      "group": "build",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    },
    {
      "label": "run-tests",
      "type": "shell",
      "command": "python run_all_tests.py",
      "problemMatcher": [],
      "group": {
        "kind": "test",
        "isDefault": true
      },
      "presentation": {
        "reveal": "always",
        "panel": "new",
        "focus": true
      }
    },
    {
      "label": "test-containers",
      "type": "shell",
      "command": "python tests/test_01_containers_health.py",
      "problemMatcher": [],
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    },
    {
      "label": "test-database",
      "type": "shell",
      "command": "python tests/test_02_database_pgvector.py",
      "problemMatcher": [],
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    },
    {
      "label": "test-openrouter",
      "type": "shell",
      "command": "python tests/test_03_openrouter_integration.py",
      "problemMatcher": [],
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    },
    {
      "label": "test-minio",
      "type": "shell",
      "command": "python tests/test_04_minio_storage.py",
      "problemMatcher": [],
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    },
    {
      "label": "test-redis",
      "type": "shell",
      "command": "python tests/test_05_redis_cache.py",
      "problemMatcher": [],
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    },
    {
      "label": "test-end-to-end",
      "type": "shell",
      "command": "python tests/test_06_end_to_end.py",
      "problemMatcher": [],
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    },
    {
      "label": "test-vector-book",
      "type": "shell",
      "command": "python tests/test_vector_with_book.py",
      "problemMatcher": [],
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    },
    {
      "label": "format-code",
      "type": "shell",
      "command": "black app/ tests/ --line-length 120",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    },
    {
      "label": "lint-code",
      "type": "shell",
      "command": "flake8 app/ tests/ --max-line-length=120 --ignore=E203,W503",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    },
    {
      "label": "check-types",
      "type": "shell",
      "command": "mypy app/",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    },
    {
      "label": "create-venv",
      "type": "shell",
      "command": "python -m venv .venv",
      "windows": {
        "command": "python -m venv .venv && .venv\\Scripts\\activate"
      },
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    },
    {
      "label": "activate-venv",
      "type": "shell",
      "command": "source .venv/bin/activate",
      "windows": {
        "command": ".venv\\Scripts\\activate"
      },
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    }
  ]
}