-- V2 POC Database Initialization Script
-- This script is executed automatically by Docker on the first startup of the PostgreSQL container.
-- It sets up the necessary database schema, extensions, tables, indexes, and initial data.

-- Section 1: Extensions
-- -------------------------

-- Enable the pgvector extension, which is required for storing and searching vector embeddings.
CREATE EXTENSION IF NOT EXISTS vector;


-- Section 2: Table Creation
-- ---------------------------

-- Create the primary table for storing test results from the AI service.
CREATE TABLE IF NOT EXISTS ai_test_logs (
    id SERIAL PRIMARY KEY,          -- Unique identifier for each log entry
    system_prompt TEXT NOT NULL,    -- The system prompt provided to the AI
    user_context TEXT NOT NULL,     -- The user context or question
    ai_result TEXT NOT NULL,        -- The response generated by the AI
    embedding vector(1024),         -- Stores the BGE-large-en-v1.5 embedding (1024 dimensions)
    file_url TEXT,                  -- A URL pointing to any associated file in MinIO storage
    response_time_ms INTEGER,       -- Tracks the performance of the AI response
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP -- Timestamp of when the log was created
);


-- Section 3: Index Creation
-- ---------------------------

-- Create standard indexes on frequently queried columns to improve performance.
CREATE INDEX IF NOT EXISTS idx_ai_test_logs_created_at ON ai_test_logs (created_at DESC);
CREATE INDEX IF NOT EXISTS idx_ai_test_logs_response_time ON ai_test_logs (response_time_ms);

-- Create a vector similarity index using the IVFFlat method.
-- This type of index is efficient for similarity searches on large datasets.
-- The `lists` parameter is a tuning parameter; a common starting point is sqrt(number of rows).
CREATE INDEX IF NOT EXISTS idx_ai_test_logs_embedding 
ON ai_test_logs USING ivfflat (embedding vector_cosine_ops) 
WITH (lists = 100);


-- Section 4: Initial Data Seeding
-- ---------------------------------

-- Insert some sample data to facilitate immediate testing after setup.
-- ON CONFLICT DO NOTHING prevents errors if the script is run multiple times with the same data.
INSERT INTO ai_test_logs (system_prompt, user_context, ai_result, response_time_ms)
VALUES 
    ('You are a helpful assistant.', 
     'Hello, this is a test message.', 
     'Hello! I''m here to help you. This is a test response from the V2 POC system.',
     1250),
    ('You are a creative storyteller.',
     'Write a short story about a dragon.',
     'Once upon a time, in a land far away, there lived a wise dragon named Ember who protected a village of kind-hearted people...',
     2100),
    ('You are a technical expert.',
     'Explain how vector databases work.',
     'Vector databases store high-dimensional vectors and enable similarity search through mathematical operations like cosine similarity...',
     1875)
ON CONFLICT DO NOTHING;


-- Section 5: Stored Procedures / Functions
-- ------------------------------------------

-- Creates a maintenance function to periodically clean up old log entries.
-- Keeps the logs table from growing indefinitely.
CREATE OR REPLACE FUNCTION cleanup_old_ai_logs(days_to_keep INTEGER DEFAULT 30)
RETURNS INTEGER AS $$
DECLARE
    deleted_count INTEGER;
BEGIN
    DELETE FROM ai_test_logs 
    WHERE created_at < NOW() - make_interval(days => days_to_keep);
    
    GET DIAGNOSTICS deleted_count = ROW_COUNT;
    
    RETURN deleted_count;
END;
$$ LANGUAGE plpgsql;

-- Creates a function to calculate similarity statistics across all embeddings.
-- This is useful for evaluating the quality and distribution of the generated embeddings.
CREATE OR REPLACE FUNCTION get_embedding_stats()
RETURNS TABLE(
    total_embeddings BIGINT,
    avg_similarity NUMERIC,
    min_similarity NUMERIC,
    max_similarity NUMERIC
) AS $$
BEGIN
    RETURN QUERY
    WITH similarity_matrix AS (
        SELECT 
            1 - (a.embedding <=> b.embedding) as similarity -- Cosine similarity
        FROM ai_test_logs a
        CROSS JOIN ai_test_logs b
        WHERE a.id < b.id -- Avoid self-comparison and duplicate pairs
        AND a.embedding IS NOT NULL 
        AND b.embedding IS NOT NULL
    )
    SELECT 
        (SELECT COUNT(*) FROM ai_test_logs WHERE embedding IS NOT NULL) as total_embeddings,
        ROUND(AVG(similarity), 4) as avg_similarity,
        ROUND(MIN(similarity), 4) as min_similarity,
        ROUND(MAX(similarity), 4) as max_similarity
    FROM similarity_matrix;
END;
$$ LANGUAGE plpgsql;


-- Section 6: Permissions
-- ----------------------

-- Grant all necessary permissions to the application user (`pocuser`).
-- This ensures the FastAPI application can read, write, and execute functions.
GRANT ALL PRIVILEGES ON DATABASE poc_db TO pocuser;
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO pocuser;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO pocuser;
GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA public TO pocuser;


-- Section 7: Logging
-- ------------------

-- Log a confirmation message to the PostgreSQL logs to indicate successful initialization.
DO $$
BEGIN
    RAISE NOTICE 'V2 POC Database initialized successfully';
    RAISE NOTICE 'pgvector extension version: %', (SELECT extversion FROM pg_extension WHERE extname = 'vector');
    RAISE NOTICE 'Sample data rows in ai_test_logs: %', (SELECT COUNT(*) FROM ai_test_logs);
END $$;
