name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scan weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.4.2'

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
    
    - name: Install dependencies
      run: |
        uv pip install --system -e .
        uv pip install --system black flake8 mypy
    
    - name: Check code formatting with Black
      run: black --check --line-length 120 app/ tests/
    
    - name: Lint with Flake8
      run: flake8 app/ tests/ --max-line-length=120 --ignore=E203,W503
    
    - name: Type check with mypy
      run: mypy app/ --ignore-missing-imports

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
    
    - name: Install dependencies
      run: |
        uv pip install --system -e .
        uv pip install --system safety bandit pip-audit
    
    - name: Run safety check
      run: safety check
      continue-on-error: true
    
    - name: Run bandit security scan
      run: bandit -r app/ -f json -o security-report.json
      continue-on-error: true
    
    - name: Run pip-audit
      run: pip-audit --format=json --output=vulnerability-report.json
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          security-report.json
          vulnerability-report.json
        retention-days: 30

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7.2-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      minio:
        image: minio/minio:RELEASE.2024-12-13T22-06-12Z
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin123
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 3
        ports:
          - 9000:9000
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
    
    - name: Install dependencies
      run: |
        uv pip install --system -e .
        uv pip install --system pytest pytest-cov pytest-asyncio
    
    - name: Set up test environment
      run: |
        # Create test environment file
        cat > .env.test << EOF
        APP_ENV=testing
        DATABASE_URL=postgresql://testuser:testpass@localhost:5432/testdb
        REDIS_URL=redis://localhost:6379
        MINIO_ENDPOINT=localhost:9000
        MINIO_ACCESS_KEY=minioadmin
        MINIO_SECRET_KEY=minioadmin123
        OPENROUTER_API_KEY=test-key-for-ci
        DEFAULT_MODEL=test/model
        LOG_LEVEL=INFO
        EOF
    
    - name: Wait for services
      run: |
        # Wait for PostgreSQL
        timeout 30 bash -c 'until pg_isready -h localhost -p 5432 -U testuser; do sleep 1; done'
        
        # Wait for Redis
        timeout 30 bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 1; done'
        
        # Wait for MinIO (optional - may not be fully ready)
        sleep 10
    
    - name: Initialize test database
      run: |
        PGPASSWORD=testpass psql -h localhost -U testuser -d testdb -c "
        CREATE EXTENSION IF NOT EXISTS vector;
        CREATE TABLE IF NOT EXISTS ai_test_logs (
            id SERIAL PRIMARY KEY,
            system_prompt TEXT NOT NULL,
            user_context TEXT NOT NULL,
            ai_result TEXT NOT NULL,
            embedding vector(1024),
            file_url TEXT,
            response_time_ms INTEGER,
            created_at TIMESTAMP DEFAULT NOW()
        );"
    
    - name: Run container health tests
      run: python tests/test_01_containers_health.py
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
        REDIS_URL: redis://localhost:6379
        MINIO_ENDPOINT: localhost:9000
      continue-on-error: true  # Allow failure in CI environment
    
    - name: Run database tests
      run: python tests/test_02_database_pgvector.py
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
    
    - name: Run Redis tests
      run: python tests/test_05_redis_cache.py
      env:
        REDIS_URL: redis://localhost:6379
    
    - name: Run MinIO tests
      run: python tests/test_04_minio_storage.py
      env:
        MINIO_ENDPOINT: localhost:9000
        MINIO_ACCESS_KEY: minioadmin
        MINIO_SECRET_KEY: minioadmin123
      continue-on-error: true  # MinIO setup may be flaky in CI
    
    - name: Generate coverage report
      run: |
        pytest tests/ --cov=app --cov-report=xml --cov-report=html
      continue-on-error: true
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
      continue-on-error: true

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: fastapi-docker-stack:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        # Run container briefly to ensure it starts
        docker run --rm -d --name test-container \
          -e OPENROUTER_API_KEY=test \
          -e DATABASE_URL=sqlite:///test.db \
          fastapi-docker-stack:test
        
        sleep 5
        
        # Check if container is running
        if docker ps | grep test-container; then
          echo "✅ Container started successfully"
          docker stop test-container
        else
          echo "❌ Container failed to start"
          docker logs test-container
          exit 1
        fi

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, docker-build]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
    
    - name: Install dependencies
      run: uv pip install --system -e .
    
    - name: Create test environment
      run: |
        cat > .env << EOF
        OPENROUTER_API_KEY=test-key
        DATABASE_URL=postgresql://pocuser:pocpass@postgres:5432/poc_db
        POSTGRES_USER=pocuser
        POSTGRES_PASSWORD=pocpass
        POSTGRES_DB=poc_db
        REDIS_URL=redis://redis:6379
        MINIO_ENDPOINT=minio:9000
        MINIO_ACCESS_KEY=minioadmin
        MINIO_SECRET_KEY=minioadmin123
        MINIO_BUCKET_NAME=poc-bucket
        APP_ENV=testing
        LOG_LEVEL=INFO
        EOF
    
    - name: Start services with Docker Compose
      run: |
        # Start all services except the main app
        docker-compose up -d postgres redis minio nginx
        
        # Wait for services to be ready
        sleep 30
        
        # Check service health
        docker-compose ps
    
    - name: Run integration tests
      run: |
        # Test database connectivity
        timeout 60 bash -c 'until docker exec $(docker-compose ps -q postgres) pg_isready -U pocuser -d poc_db; do sleep 2; done'
        
        # Test Redis connectivity  
        timeout 60 bash -c 'until docker exec $(docker-compose ps -q redis) redis-cli ping | grep PONG; do sleep 2; done'
        
        echo "✅ Integration test completed"
    
    - name: Cleanup
      if: always()
      run: docker-compose down -v

  performance-test:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        pip install uv
        uv pip install --system -e .
        uv pip install --system locust
    
    - name: Create performance test environment
      run: |
        cat > .env << EOF
        OPENROUTER_API_KEY=test-key
        DATABASE_URL=postgresql://pocuser:pocpass@postgres:5432/poc_db
        POSTGRES_USER=pocuser
        POSTGRES_PASSWORD=pocpass
        POSTGRES_DB=poc_db
        APP_ENV=testing
        LOG_LEVEL=WARNING
        EOF
    
    - name: Start services
      run: |
        docker-compose up -d
        sleep 60  # Wait for full startup
    
    - name: Run performance tests
      run: |
        # Simple load test (customize as needed)
        echo "⚡ Running basic performance test"
        
        # Test health endpoint performance
        for i in {1..10}; do
          start_time=$(date +%s%3N)
          curl -s http://localhost/health > /dev/null
          end_time=$(date +%s%3N)
          echo "Health check $i: $((end_time - start_time))ms"
        done
    
    - name: Cleanup
      if: always()
      run: docker-compose down -v